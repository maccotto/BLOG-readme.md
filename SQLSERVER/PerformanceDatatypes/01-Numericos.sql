/*
  ********************************************************************
  Tipos de datos numericos
  TriggerDB Consulting
  http://www.triggerdb.com
  Maximiliano Damian Accotto 
  ********************************************************************
*/






/*
 tinyint  // 0 to 255                                                                  //  1 Byte
 smallint // -2^15 (-32,768) to 2^15-1 (32,767)                                        //  2 Bytes
 int      // -2^31 (-2,147,483,648) to 2^31-1 (2,147,483,647)                          // 4 Bytes
 bigint   // -2^63 (-9,223,372,036,854,775,808) to 2^63-1 (9,223,372,036,854,775,807)  // 8 Bytes
 
 smallmoney // - 214,748.3648 to 214,748.3647                        // 4 bytes
 money      // -922,337,203,685,477.5808 to 922,337,203,685,477.5807 // 8 bytes
 
 decimal(p,s) numeric(p,s) //	–10^38+1 to 10^38-1                  //	5 to 17 bytes (1 to 9 = 5 bytes)

 float // - 1.79E+308 to -2.23E-308,0 and 2.23E-308 to 1.79E+308    // Depends on the value of n
 real // - 3.40E + 38 to -1.18E - 38, 0 and 1.18E - 38 to 3.40E+38 // 4 Bytes
  */


  --- MONEY VS DECIMAL

DECLARE @M1 MONEY, @M2 MONEY, @M3 MONEY
DECLARE @D1 DECIMAL(19,4), @D2 DECIMAL(19,4), @D3 DECIMAL(19,4)
DECLARE @F1 FLOAT, @F2 FLOAT, @F3 FLOAT;
SET @M1 = 1.00;
SET @M2 = 345.00;
SET @M3 = @M1/@M2;
SET @D1 = 1.00;
SET @D2 = 345.00;
SET @D3 = @D1/@D2;
SET @F1 = 1.00;
SET @F2 = 345.00;
SET @F3 = @F1/@F2;
SELECT @M3 AS MONEY, @D3 AS DECIMAL, @F3 AS FLOAT;

USE tempdb 
GO

--- DATA NUMERIC TYPES PERFORMANCE

CREATE TABLE INTTBL 
 (COL1 INT PRIMARY KEY, 
  COL2 INT,
  COL3 INT)

CREATE TABLE BIGINTTBL 
 (COL1 BIGINT PRIMARY KEY, 
  COL2 BIGINT,
  COL3 BIGINT)

--DEFAULT DECIMAL, WHICH HAS A DEFAULT PRECISION OF 18 AND SCALE OF 0
CREATE TABLE DECIMALTBL
 (COL1 DECIMAL PRIMARY KEY, 
  COL2 DECIMAL,
  COL3 DECIMAL)

/* CREATE A VARIABLE TO STORE THE MAXIMUM NUMBER TO INSERT.
HELPS ENSURE ALL TABLES HAVE THE SAME NUMBER OF INSERTS */
DECLARE @MAXVALUE INT 
SET @MAXVALUE = 1000000 --1 MILLION

--TRUNCATE TABLE DBO.INTTBL 

INSERT INTO DBO.INTTBL WITH (TABLOCK) (COL1, COL2, COL3) 
SELECT TOP (@MAXVALUE)
 ROW_NUMBER() OVER (ORDER BY S1.NAME) AS COL1,
 @MAXVALUE - ROW_NUMBER() OVER (ORDER BY S1.NAME) AS COL2,
 ROW_NUMBER() OVER (ORDER BY S1.NAME) * 2 AS COL3
FROM MASTER.DBO.SYSCOLUMNS S1,
 MASTER.DBO.SYSCOLUMNS  S2


INSERT INTO DBO.BIGINTTBL WITH (TABLOCK) (COL1, COL2, COL3) 
SELECT TOP (@MAXVALUE)
 ROW_NUMBER() OVER (ORDER BY S1.NAME) AS COL1,
 @MAXVALUE - ROW_NUMBER() OVER (ORDER BY S1.NAME) AS COL2,
 ROW_NUMBER() OVER (ORDER BY S1.NAME) * 2 AS COL3
FROM MASTER.DBO.SYSCOLUMNS S1,
 MASTER.DBO.SYSCOLUMNS  S2

INSERT INTO DBO.DECIMALTBL WITH (TABLOCK) (COL1, COL2, COL3)  
SELECT TOP (@MAXVALUE)
 ROW_NUMBER() OVER (ORDER BY S1.NAME) AS COL1,
 @MAXVALUE - ROW_NUMBER() OVER (ORDER BY S1.NAME) AS COL2,
 ROW_NUMBER() OVER (ORDER BY S1.NAME) * 2 AS COL3
FROM MASTER.DBO.SYSCOLUMNS S1,
 MASTER.DBO.SYSCOLUMNS  S2  

 EXEC SP_SPACEUSED 'DBO.INTTBL'
 EXEC SP_SPACEUSED 'DBO.BIGINTTBL'
 EXEC SP_SPACEUSED 'DBO.DECIMALTBL'

CREATE UNIQUE NONCLUSTERED INDEX INTTBLINDEX ON DBO.INTTBL 
(COL2 ASC)
CREATE UNIQUE NONCLUSTERED INDEX BIGINTTBLINDEX ON DBO.BIGINTTBL 
(COL2 ASC)
CREATE UNIQUE NONCLUSTERED INDEX DECIMALTBLINDEX ON DBO.DECIMALTBL 
(COL2 ASC)

-- VER QP

SELECT * FROM DBO.INTTBL
SELECT * FROM DBO.BIGINTTBL
SELECT * FROM DBO.DECIMALTBL

DROP TABLE  DBO.INTTBL
DROP TABLE DBO.BIGINTTBL
DROP TABLE DBO.DECIMALTBL



